# Function to test if DNS blocking is active
function testDNSBlock {
    $dnsServer = (Get-DnsClientServerAddress -InterfaceAlias "Ethernet 3").ServerAddresses
    Write-Output "Current DNS server for Ethernet 3 is: $dnsServer"

    $malwareIP = [System.Net.Dns]::GetHostAddresses("malware.testcategory.com").IPAddressToString
    if ($malwareIP -ne "0.0.0.0") {
        Write-Output "The host is not using DNS filtering."
    } else {
        Write-Output "DNS filtering is active and working."
    }
}

# Function to enable DNS over HTTPS (DoH)
function enableDoH {
    Set-ItemProperty -Path "HKLM:SYSTEM\CurrentControlSet\Services\Dnscache\Parameters" -Name "EnableAutoDoH" -Value 2
    Write-Output "Enabled DoH. A system reboot is required for the changes to take effect."
}

# Function to setup Cloudflare's DoH on Ethernet 3 NIC
function setupQuadDoH {
    # a. Change DNS server of Ethernet 3 to 1.1.1.2
    Set-DnsClientServerAddress -InterfaceAlias 'Ethernet 3' -ServerAddresses '1.1.1.2'
    
    # b. Register the DoH template
    Add-DnsClientDohServerAddress 1.1.1.2 https://security.cloudflare-dns.com/dns-query -AutoUpgrade $True
    
    # c. Enable DoH on Ethernet 3 using the registry
    $guid = (Get-NetAdapter -InterfaceAlias "Ethernet 3").InterfaceGuid
    $regPath = 'HKLM:\System\CurrentControlSet\Services\Dnscache\InterfaceSpecificParameters\' + $guid + '\DohInterfaceSettings\Doh\1.1.1.2'
    New-Item -Path $regPath -Force
    Set-ItemProperty -Path $regPath -Name "DohFlags" -Value 1
    Write-Output "Configured Cloudflare's DoH on Ethernet 3 NIC."
}

# Function to reset DoH settings to default
function resetDoH {
    Set-DnsClientServerAddress -InterfaceAlias 'Ethernet 3' -ServerAddresses '10.0.2.3'
    Write-Output "Reset DNS settings of Ethernet 3 to 10.0.2.3."
}

# Function to block outbound HTTP traffic (port 80)
function blockHTTP {
    if (-not (Get-NetFirewallRule -Name "BlockOutboundHTTP" -ErrorAction SilentlyContinue)) {
        New-NetFirewallRule -Name "BlockOutboundHTTP" -Direction Outbound -Protocol TCP -LocalPort 80 -Action Block -DisplayName "Block Outbound HTTP"
        Write-Output "Outbound HTTP traffic on port 80 has been blocked."
    } else {
        Write-Output "Outbound HTTP traffic on port 80 is already blocked."
    }
}

# Function to test if the TCP port 80 (HTTP) traffic is blocked
function testHTTPBlock {
    $rule = Get-NetFirewallRule -Name "BlockOutboundHTTP" -ErrorAction SilentlyContinue
    if ($rule) {
        Write-Output "HTTP traffic on port 80 is blocked."
    } else {
        Write-Output "HTTP traffic on port 80 is NOT blocked."
    }
}

# Function to disable the HTTP blocking rule
function disableHTTPBlock {
    if (Get-NetFirewallRule -Name "BlockOutboundHTTP" -ErrorAction SilentlyContinue) {
        Remove-NetFirewallRule -Name "BlockOutboundHTTP"
        Write-Output "Outbound HTTP traffic on port 80 has been unblocked."
    } else {
        Write-Output "No rule found blocking outbound HTTP traffic on port 80."
    }
}

# Command argument parsing
switch ($args[0]) {
    "DoH-test" {
        testDNSBlock
    }
    "DoH-enable" {
        enableDoH
    }
    "DoH-setupQuad" {
        setupQuadDoH
    }
    "DoH-reset" {
        resetDoH
    }
    "HTTP-block" {
        blockHTTP
    }
    "HTTP-testBlock" {
        testHTTPBlock
    }
    "HTTP-disableBlock" {
        disableHTTPBlock
    }
    default {
        Write-Output "Unknown argument. Please use a valid function name as the argument."
    }
}
