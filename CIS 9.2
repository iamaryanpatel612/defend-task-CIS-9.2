# defend.ps1

# Function to test if DNS filtering is active on the system
function testDNSBlock {
    # Retrieve and display the original DNS servers of Ethernet 3 NIC
    $dnsServers = Get-DnsClientServerAddress -InterfaceAlias 'Ethernet 3' -AddressFamily IPv4
    $originalDNS = $dnsServers.ServerAddresses
    Write-Output "Original DNS Server(s) of Ethernet 3 NIC: $originalDNS"

    # Resolve the IP address for a known malware domain and check DNS filtering
    try {
        $hostEntry = [System.Net.Dns]::GetHostAddresses('malware.testcategory.com')
        $ipAddress = $hostEntry.IPAddressToString
        
        if ($ipAddress -ne '0.0.0.0') {
            Write-Output "The host is not using DNS filtering."
        } else {
            Write-Output "The host is using DNS filtering."
        }
    } catch {
        Write-Error "Error resolving the domain. It might be blocked or not exist."
    }
}

# Function to enable DNS over HTTPS (DoH) for Win11
function enableDoH {
    # Set EnableAutoDoH property in the specified registry key to 2
    Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters" -Name "EnableAutoDoH" -Value 2

    # Reboot the computer
    Restart-Computer
}

# Function to set up Cloudflare's DoH on Ethernet 3 NIC
function setupQuadDoH {
    # a. Change the DNS server of Ethernet 3 to 1.1.1.2
    Set-DnsClientServerAddress -InterfaceAlias 'Ethernet 3' -ServerAddresses '1.1.1.2'

    # b. Register the DoH template
    Add-DnsClientDohServerAddress 1.1.1.2 `
        https://security.cloudflare-dns.com/dns-query `
        -AutoUpgrade $True

    # c. Enable DoH on Ethernet 3 using the registry

    # i. Set $guid to the InterfaceGuid of Ethernet 3
    $ethernet3 = Get-NetAdapter | Where-Object { $_.Name -eq 'Ethernet 3' }
    $guid = $ethernet3.InterfaceGuid

    # ii. Create a registry path
    $regPath = "HKLM:\System\CurrentControlSet\Services\Dnscache\InterfaceSpecificParameters\$guid\DohInterfaceSettings\Doh\1.1.1.2"

    # If the path doesn't exist, create it
    if (-not (Test-Path $regPath)) {
        New-Item -Path $regPath -Force
    }

    # iii. Enable DoH by setting the property
    Set-ItemProperty -Path $regPath -Name 'DohFlags' -Value 1
}

# Function to reset DoH settings
function resetDoH {
    # a. Reset the DNS server value of Ethernet 3 back to 10.0.2.3
    Set-DnsClientServerAddress -InterfaceAlias 'Ethernet 3' -ServerAddresses '10.0.2.3'
}

# Check the first argument of the command line
$argument = $args[0]

switch ($argument) {
    "DoH-test" {
        # Call testDNSBlock() function
        testDNSBlock
    }
    "DoH-enable" {
        # Call enableDoH() function
        enableDoH
    }
    "DoH-setupQuad" {
        # Call setupQuadDoH() function
        setupQuadDoH
    }
    "DoH-reset" {
        # Call resetDoH() function
        resetDoH
    }
    default {
        # Output an error message if the first argument is unknown
        Write-Error "Unknown argument: $argument. Please use 'DoH-test', 'DoH-enable', 'DoH-setupQuad', or 'DoH-reset'."
    }
}

